#!/bin/bash

set -u

# Functions intended for use by the rpi-image-gen core build system only.
# There should be no need for this script to be included by anything else.


# If a variable is unset, or set to the empty string, initialise it
assignv() {
   local var="$1"
   local val="$2"
   if [ -z "${!var+x}" ] || [ -z "${!var-x}" ] ; then
      if [[ "$val" =~ ^$ ]] ; then
         eval unset "${var}"
      else
         eval "${var}"="$val"
      fi
   fi
}


# .ini file section parser reading key value pairs into the env as shell variables
# initialising them only if their fully qualified equivalent is not set.
# key names will be prefixed with section name and converted to lower case, e.g.
#
# [mysection]
# foo=zzz
# BAR=yyy
#
# will yield:
# KSconf_mysection_foo=zzz
# KSconf_mysection_bar=yyy
#
merge_config_section() {
   local section=$1
   local cfg=$2
   local attrs=$(crudini --get --format=sh "$cfg" "$section" 2>/dev/null)
   if [ $? -eq 0 ] ; then
      while IFS="=" read -r key value ; do
         [[ "$key" =~ ^#.*$ ]] && continue
         [[ "$key" =~ ^$ ]] && continue
         local var=KSconf_"${section}"_"${key,,}"
         assignv "$var" "$value"
      done < <(printf '%s\n' "$attrs")
   fi
}


# Read a config file and aggregate settings. Included config files will be read
# from the directory of the current config file.
aggregate_config() {
   local cfg=$(realpath -m "$1" 2>/dev/null)
   test -s "$cfg" || die "Invalid config: $cfg"
   while read -r w1 w2; do
    [[ "$w1" =~ ^#.*$ ]] && continue
    [[ "$w1" =~ ^$ ]] && continue
    case $w1 in
       include)
         [[ $(basename "$cfg") ==  $(basename "$w2") ]] && die "Recursive include: $cfg"
         aggregate_config "$(dirname "$cfg")/$w2"
         ;;
       *)
         ;;
    esac
   done < "$cfg"

   merge_config_section device "$cfg"
   merge_config_section image "$cfg"
   merge_config_section sys "$cfg"
   merge_config_section sbom "$cfg"
   merge_config_section meta "$cfg"
}


# shell variable list parser reading key value pairs into the env with optional
# section prefix. key names will be prefixed and converted to lower case, e.g.
#
# foo=zzz
# BAR=yyy
#
# will yield:
# KSconf_foo=zzz
# KSconf_bar=yyy
#
apply_options() {
   if [[ $# -eq 2 && -f $2 ]] ; then
      local prefix=KSconf_"${1,,}"
      local attrs=$(cat "$2")
   else
      local prefix=KSconf
      local attrs=$(cat "$1")
   fi
   while IFS="=" read -r key value ; do
      [[ "$key" =~ ^#.*$ ]] && continue
      [[ "$key" =~ ^$ ]] && continue
      if [[ "$value" =~ ^$ ]] ; then
         eval unset "${prefix}_${key,,}"
      else
         eval "${prefix}_${key,,}"="$value"
      fi
   done < <(printf '%s\n' "$attrs")
}


# shell variable list parser with prefix that reads key value pairs into the env
# as above, but only if the fully qualified KSconf key is not set or set to the
# empty string.
aggregate_options() {
   if [[ $# -eq 2 && -f $2 ]] ; then
      local attrs=$(cat "$2")
   else
      local attrs=$(cat)
   fi
   local section="${1,,}"
   while IFS="=" read -r key value ; do
      [[ "$key" =~ ^#.*$ ]] && continue
      [[ "$key" =~ ^$ ]] && continue
      local var="KSconf_${section}_${key,,}"
      assignv "$var" "$value"
   done < <(printf '%s\n' "$attrs")
}
