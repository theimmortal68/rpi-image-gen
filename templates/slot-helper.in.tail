# End auto-generated

err (){
   >&2 echo "$@"
}


die (){
   err "$@"
   exit 1
}


: "${BOOTA_UUID:?}"
: "${BOOTB_UUID:?}"
: "${SYSTEMA_UUID:?}"
: "${SYSTEMB_UUID:?}"


# Future scope may require
: "${BOOTA_ENCRYPTED:?}"
: "${BOOTB_ENCRYPTED:?}"
: "${SYSTEMA_ENCRYPTED:?}"
: "${SYSTEMB_ENCRYPTED:?}"


prefix=disk/by-slot


# mandatory
command -v od > /dev/null 2>&1 || die "!od"
command -v sed > /dev/null 2>&1 || die "!sed"
command -v blkid > /dev/null 2>&1 || die "!blkid"


usage()
{
cat <<-EOF >&2
Usage
  $(basename "$0") [-f|-u|-t][-m] [arg]
Slot delegation helper for AB systems

Write out slot information for the given argument based on option specifiers.
If provided, the arg is a filesystem UUID. Options dictate what is written to
stdout. If no arg is provided, the current boot configuration is assumed.

  [-f] fully qualified device node path
  [-u] udev - output suitable for udev rules (SLOT=<val>)
  [-t] tryboot fragment - output suitable for autoboot.txt
  [-m] matching partition in same slot
EOF
}


fqname=0
match=0
tryboot=0
udev=0
while getopts "fmtu" opt; do
   case $opt in
      f)
         fqname=1
         shift $((OPTIND - 1))
         ;;
      m)
         match=1
         shift $((OPTIND - 1))
         ;;
      t)
         tryboot=1
         shift $((OPTIND - 1))
         ;;
      u)
         udev=1
         shift $((OPTIND - 1))
         ;;
      ?|*)
         usage ; exit 1
         ;;
   esac
done
arg="$1"

nopt=$((fqname + udev + tryboot))
if [ "$nopt" -gt 1 ] ; then die "only one of -f,-u,-t supported" ; fi


# https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#BOOT_ORDER
bootmode=$(od -An -tx1 /proc/device-tree/chosen/bootloader/boot-mode | sed 's/[^0-9a-fA-F]//g')
bootpart=$(od -An -tx1 /proc/device-tree/chosen/bootloader/partition | sed 's/[^0-9a-fA-F]//g')
bootmode=$(printf "%d" "$bootmode")
bootpart=$(printf "%d" "$bootpart")


case $bootmode in
   1) bootdev=mmcblk0 ;;
   6) bootdev=nvme0n1 ;;
   *) die "unsupported bootmode $bootmode" ;;
esac


test -e /sys/class/block/$bootdev || die "Bad base blockdev $bootdev"


_basename() {
    echo "$1" | sed 's:.*/::'
}


uuid2dev() {
    [ -z "$1" ] && return 1
    _dev=$(blkid -t UUID=${1} -o device) || return 1
    echo $(_basename "$_dev")
}


dev2uuid() {
    [ -z "$1" ] && return 1
    blkid -s UUID -o value "/dev/${1}"
}


# Establish boot device
bootblkdev=${bootdev}p${bootpart}
test -b "/dev/${bootblkdev}" || die "Bad boot blockdev $bootblkdev"
bootuuid=$(dev2uuid "$bootblkdev") || die "No UUID for boot device $bootblkdev"


# No opts and arg means show boot device info only
if [ "$nopt" -eq 0 ] && [ -z "$arg" ] ; then
   echo "boot:${bootmode}:${bootpart}"
   echo "blk:/dev/${bootblkdev}:${bootuuid}"
   exit 0
fi


# Resolve slot configuration UUIDs
# shellcheck disable=SC2154
for b in BOOTA BOOTB SYSTEMA SYSTEMB ; do
    var="${b}_UUID"
    eval 'val="$'"$var"'"'
    dev=$(uuid2dev "$val") || die "Error mapping UUID $val to blkdev"
    eval "$b=\$dev"
done


# Mandatory
: "${BOOTA:?}"
: "${BOOTB:?}"
: "${SYSTEMA:?}"
: "${SYSTEMB:?}"


if [ -z "$arg" ] ; then
    dev="$bootblkdev"
else
    dev=$(uuid2dev "$arg") || die "No such UUID"
fi


# Establish blk device slot
unset slot
case $dev in
   "$BOOTA")
      if [ "$bootblkdev" = "$BOOTA" ] ; then slot="active/boot" ; fi
      if [ "$bootblkdev" = "$BOOTB" ] ; then slot="other/boot" ; fi
      ;;
   "$BOOTB")
      if [ "$bootblkdev" = "$BOOTB" ] ; then slot="active/boot" ; fi
      if [ "$bootblkdev" = "$BOOTA" ] ; then slot="other/boot" ; fi
      ;;
   "$SYSTEMA")
      if [ "$bootblkdev" = "$BOOTA" ] ; then slot="active/system" ; fi
      if [ "$bootblkdev" = "$BOOTB" ] ; then slot="other/system" ; fi
      ;;
   "$SYSTEMB")
      if [ "$bootblkdev" = "$BOOTB" ] ; then slot="active/system" ; fi
      if [ "$bootblkdev" = "$BOOTA" ] ; then slot="other/system" ; fi
      ;;
esac


if [ -z ${slot+x} ] ; then
   die "No slot for blkdev $dev"
fi


# Post-process slot based on opts
if [ $match -eq 1 ] ; then slot=$(echo "$slot" | sed -e 's|boot|system|;t' -e 's|system|boot|') ; fi

if [ $fqname -eq 1 ] ; then
   slot="/dev/${prefix}/${slot}"

elif [ $udev -eq 1 ] ; then
   slot="SLOT=${prefix}/${slot}"

elif [ $tryboot -eq 1 ] ; then
   case $bootblkdev in
      "$BOOTA") bootpart_other=$(echo "$BOOTB" | sed 's/.*p\([0-9][0-9]*\)$/\1/') ;;
      "$BOOTB") bootpart_other=$(echo "$BOOTA" | sed 's/.*p\([0-9][0-9]*\)$/\1/') ;;
      *) die "bootpart $bootpart not found in pmap" ;;
   esac

   cat << EOF
[all]
tryboot_a_b=1
boot_partition=${bootpart}
[tryboot]
boot_partition=${bootpart_other}
EOF
   exit 0

else
   :
fi

echo "$slot"
exit 0
