name: Build rpi-image-gen image

on:
  workflow_dispatch:
  # push:
  #   branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    env:
      DEBIAN_FRONTEND: noninteractive
      KS_HELPERS: ${{ github.workspace }}/ks_helpers

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # optional

      - name: Install host deps from repo script
        run: |
          set -eux
          sudo apt-get -o Acquire::Retries=3 -o DPkg::Lock::Timeout=600 update
          sudo ./install_deps.sh

      - name: Enable cross-arch emulation
        run: |
          set -eux
          sudo apt-get -o Acquire::Retries=3 -o DPkg::Lock::Timeout=600 update
          sudo apt-get -o Acquire::Retries=3 -o DPkg::Lock::Timeout=600 install -y qemu-user-static binfmt-support
          sudo update-binfmts --enable qemu-aarch64 || true

      - name: Provide Debian archive signing keys for mmdebstrap
        run: |
          set -eux
          sudo apt-get -o Acquire::Retries=3 -o DPkg::Lock::Timeout=600 update
          sudo apt-get -o Acquire::Retries=3 -o DPkg::Lock::Timeout=600 install -y debian-archive-keyring
          mkdir -p keydir
          cp /usr/share/keyrings/debian-archive-keyring.gpg keydir/
          ls -l keydir

      # Optional: cache apt archives used by mmdebstrap
      - name: Prepare APT cache dir
        run: |
          set -eux
          mkdir -p "${HOME}/.cache/rpi-image-gen/apt"
          echo "APT_CACHE_DIR=${HOME}/.cache/rpi-image-gen/apt" >> "$GITHUB_ENV"

      - name: Restore/save APT cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/rpi-image-gen/apt
          key: ${{ runner.os }}-aptcache-v1

      - name: Build image
        env:
          IGconf_sys_apt_keydir: ${{ github.workspace }}/keydir
          IGconf_sys_apt_cache_dir: ${{ env.APT_CACHE_DIR }}
        run: |
          set -euxo pipefail
          ./build.sh -c config/generic64-apt-simple.cfg
          # post-image.sh already writes compressed .zst files to work/*/deploy/

      - name: Stage outputs (runner-owned; no root perms)
        if: always()
        run: |
          set -eux
          rm -rf ci_out
          mkdir -p ci_out
          shopt -s nullglob
          # copy deploy and logs; artefacts are uncompressed/raw, deploy has .zst
          for d in work/*/deploy work/*/logs; do
            [ -d "$d" ] || continue
            img="$(basename "$(dirname "$d")")"
            dest="ci_out/${img}/$(basename "$d")"
            mkdir -p "$dest"
            cp -r --no-preserve=mode,ownership,timestamps "$d/." "$dest/"
          done
          find ci_out -type f -print || true

      - name: Create checksums for .img.zst
        run: |
          set -eux
          shopt -s nullglob globstar
          for f in ci_out/**/deploy/*.img.zst; do
            sha256sum "$f" > "${f}.sha256"
          done

      - name: Verify .img.zst and .sha256 exist
        run: |
          set -eux
          shopt -s nullglob globstar
          files=(ci_out/**/deploy/*.img.zst)
          [ ${#files[@]} -gt 0 ] || { echo "No .img.zst files found"; exit 1; }
          for f in "${files[@]}"; do
            [ -f "${f}.sha256" ] || { echo "Missing checksum for $f"; exit 1; }
          done

      - name: Create/update release with assets
        uses: ncipollo/release-action@v1
        with:
          tag: nightly-${{ github.run_id }}
          name: Nightly ${{ github.run_id }}
          allowUpdates: true
          draft: false
          prerelease: true
          # Only publish the compressed image + checksum
          artifacts: "ci_out/**/deploy/*.img.zst,ci_out/**/deploy/*.img.zst.sha256"
          artifactErrorsFailBuild: true
          token: ${{ secrets.GITHUB_TOKEN }}
